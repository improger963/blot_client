// src/components/WithdrawForm.tsx
import { useForm, type SubmitHandler } from 'react-hook-form';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { createWithdrawalRequest } from '../services/dataService';
import type { CreateWithdrawalPayload } from '../types/api';
import { Button, Input } from './ui';
import { motion } from 'framer-motion';
import { SendIcon, ShieldIcon } from './icons';
import { showError, showSuccess } from '../lib/notifications';

interface WithdrawFormProps {
    onSuccess: () => void;
}

export const WithdrawForm = ({ onSuccess }: WithdrawFormProps) => {
    const queryClient = useQueryClient();
    const { register, handleSubmit, formState: { errors }, watch } = useForm<CreateWithdrawalPayload>();

    const { mutate, isPending, error } = useMutation({
        mutationFn: (payload: CreateWithdrawalPayload) => createWithdrawalRequest(payload),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['walletBalance'] });
            queryClient.invalidateQueries({ queryKey: ['walletHistory'] });
            showSuccess('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            onSuccess();
        },
        onError: (err) => showError(err.message),
    });

    const onSubmit: SubmitHandler<CreateWithdrawalPayload> = (data) => {
        mutate({ ...data, amount: Number(data.amount) });
    };

    const amountValue = watch('amount');
    const pinValue = watch('pin');

    return (
        <motion.form
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            onSubmit={handleSubmit(onSubmit)}
            className="space-y-6"
        >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã */}
            <div className="text-center space-y-2">
                <div className="flex justify-center">
                    <motion.div 
                        className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary/10 border border-primary/20"
                        whileHover={{ 
                            scale: 1.1,
                            rotate: [0, 5, -5, 0]
                        }}
                        transition={{ duration: 0.5 }}
                    >
                        <SendIcon className="h-6 w-6 text-primary" />
                    </motion.div>
                </div>
                <h3 className="text-lg font-semibold text-foreground">–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</h3>
                <p className="text-sm text-muted-foreground">
                    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
                </p>
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è —Å—É–º–º—ã */}
            <div className="space-y-2">
                <label htmlFor="amount" className="text-sm font-medium text-foreground flex items-center gap-2">
                    üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞
                </label>
                <Input
                    id="amount"
                    type="number"
                    step="0.01"
                    variant="filled"
                    isError={!!errors.amount}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 50.50"
                    {...register('amount', {
                        required: '–°—É–º–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
                        valueAsNumber: true,
                        min: { value: 1, message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 USD' },
                        validate: {
                            format: (value) => /^\d+(\.\d{1,2})?$/.test(value.toString()) || '–§–æ—Ä–º–∞—Ç: 10 –∏–ª–∏ 10.50'
                        }
                    })}
                />
                {errors.amount && (
                    <motion.p
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="text-sm text-red-400 flex items-center gap-1"
                    >
                        ‚ö†Ô∏è {errors.amount.message}
                    </motion.p>
                )}
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ */}
            <div className="space-y-2">
                <label htmlFor="address" className="text-sm font-medium text-foreground flex items-center gap-2">
                    üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
                </label>
                <Input
                    id="address"
                    variant="filled"
                    isError={!!errors.address}
                    placeholder="TXWITHDRAWALADDRESS123456..."
                    {...register('address', {
                        required: '–ê–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                        minLength: { value: 10, message: '–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π' }
                    })}
                />
                {errors.address && (
                    <motion.p
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="text-sm text-red-400 flex items-center gap-1"
                    >
                        ‚ö†Ô∏è {errors.address.message}
                    </motion.p>
                )}
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è PIN-–∫–æ–¥–∞ */}
            <div className="space-y-2">
                <label htmlFor="pin" className="text-sm font-medium text-foreground flex items-center gap-2">
                    <ShieldIcon className="h-4 w-4 text-muted-foreground" />
                    PIN-–∫–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </label>
                <Input
                    id="pin"
                    type="password"
                    maxLength={4}
                    variant="filled"
                    isError={!!errors.pin}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã"
                    {...register('pin', {
                        required: 'PIN-–∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                        minLength: { value: 4, message: 'PIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã' },
                        maxLength: { value: 4, message: 'PIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã' },
                        pattern: { value: /^\d+$/, message: 'PIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã' }
                    })}
                />
                {errors.pin && (
                    <motion.p
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="text-sm text-red-400 flex items-center gap-1"
                    >
                        ‚ö†Ô∏è {errors.pin.message}
                    </motion.p>
                )}

                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–≤–æ–¥–∞ PIN */}
                {pinValue && (
                    <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        className="flex items-center gap-2 text-xs text-muted-foreground"
                    >
                        <div className={`h-1 flex-1 rounded-full ${pinValue.length === 4 ? 'bg-green-400' : 'bg-yellow-400'
                            }`} />
                        <span>{pinValue.length === 4 ? '‚úì –ì–æ—Ç–æ–≤–æ' : `${pinValue.length}/4 —Ü–∏—Ñ—Ä`}</span>
                    </motion.div>
                )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏—è—Ö */}
            <div className="rounded-lg bg-card/30 border border-border/40 p-3 space-y-2">
                <div className="flex justify-between text-xs">
                    <span className="text-muted-foreground">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</span>
                    <span className="font-semibold text-foreground">1 USD</span>
                </div>
                <div className="flex justify-between text-xs">
                    <span className="text-muted-foreground">–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏:</span>
                    <span className="font-semibold text-foreground">~0.1 USD</span>
                </div>
                <div className="flex justify-between text-xs">
                    <span className="text-muted-foreground">–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</span>
                    <span className="font-semibold text-foreground">1-24 —á–∞—Å–∞</span>
                </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.98 }}>
                <Button
                    type="submit"
                    className="w-full h-12 rounded-xl font-semibold shadow-lg border-gradient"
                    isLoading={isPending}
                    disabled={!amountValue || !pinValue || pinValue.length !== 4}
                >
                    {isPending ? '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥'}
                </Button>
            </motion.div>

            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <div className="rounded-lg bg-yellow-500/10 border border-yellow-500/20 p-3">
                <p className="text-xs text-yellow-600 text-center">
                    üîí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã.
                </p>
            </div>

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ API */}
            {error && (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="rounded-lg bg-red-500/10 border border-red-500/20 p-3"
                >
                    <p className="text-sm text-red-400 text-center">
                        ‚ùå {error.message}
                    </p>
                </motion.div>
            )}
        </motion.form>
    );
};